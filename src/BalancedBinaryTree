//Given a binary tree, determine if it is height-balanced.
//For this problem, a height-balanced binary tree is defined as a binary tree in which 
// the depth of the two subtrees of every node never differ by more than 1.

// Rewrite !!!

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    // An empty tree is height-balanced. A non-empty binary tree T is balanced if:
    // 1) Left subtree of T is balanced
    // 2) Right subtree of T is balanced
    // 3) The difference between heights of left subtree and right subtree is not more than 1.

    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
            
        int lh = height(root.left);
        int rh = height(root.right);
        if(Math.abs(lh-rh) <=1 && isBalanced(root.left) && isBalanced(root.right))
            return true;
            
        return false;
    }
    
    private int height(TreeNode root) {
        if(root == null)
            return 0;
        
        return 1 + Math.max(height(root.left), height(root.right));
    }
}
